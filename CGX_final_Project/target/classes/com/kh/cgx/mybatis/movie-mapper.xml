<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">


<mapper namespace="movies">

<!-- 무비차트 리스트 -->
	<select id="list"  resultType="movies">
		select * from movie
	</select>

<!-- 상영 예정작 리스트 -->
	<select id="pre_list" resultType="movies">
		select * from movie where movie_startdate >= sysdate
	</select>
	
	<!-- 트레일러 리스트 -->
	<select id="video_list" resultType="videoVO" >
	select * from movie m
    inner join
    video v on m.movie_no = v.movie_no
<!--     where v.movie_no = #{movie_no} -->
	
	</select>
	
	<!-- 파인더 리스트 -->
	<select id="finder_list" resultType="movies" parameterType="movieVO2">
		select * from movie M
			inner join actor A
			on M.movie_no = A.movie_no
	<where>
	<if test="type != '' and keyword != ''">
		<choose>
			<!-- 전체 검색 일경우 -->
			<when test="type == 'all'">
				 movie_title like '%'||#{keyword}||'%'
<!-- 				or actor_name like '%'||#{keyword}||'%' -->
				or movie_director like '%'||#{keyword}||'%'
				or actor_name like '%'||#{keyword}||'%'
			</when>
			
			<!-- 전체 검색 이 아닐경우 -->
			<otherwise>
				 ${type} like '%'||#{keyword}||'%'
			</otherwise>
		</choose>
		
	</if>
	<if test="genre != null">
	 and movie_genre in
	<foreach collection="genre" item="type" index="index" open="(" close=")" separator=",">
		#{type}
	</foreach>
	</if>
	
	<if test="country != null">
	 and movie_country in
	<foreach collection="country" item="type" index="index" open="(" close=")" separator=",">
		#{type}
	</foreach>
	</if>
	
	<if test="grade != null">
	 and movie_grade in
	<foreach collection="grade" item="type" index="index" open="(" close=")" separator=",">
		#{type}
	</foreach>
	</if>
	</where>
		order by M.movie_no asc
	</select>
	
	<!-- 검색 결과 수 -->
	<select id="count" resultType="int">
		select count(*) from movie
		
		<if test="type != '' and keyword != ''">
		<choose>
<!-- 		전체 검색 일경우  -->
			<when test="type == 'all'">
				where movie_title like '%'||#{keyword}||'%'
<!-- 				or actor_name like '%'||#{keyword}||'%' -->
				or movie_director like '%'||#{keyword}||'%'
			</when>
			
<!-- 		전체 검색 이 아닐경우 -->
			<otherwise>
				where ${type} like '%'||#{keyword}||'%'
			</otherwise>
		</choose>
	</if>
	</select>
	
	<!-- 남녀 그래프 분포 -->
<select id="humanCount" resultType="int" parameterType="map" >
		select 
    count(ticket.ticket_no)
from 
    movie 
        inner join movietime on movie.movie_no = movietime.movie_no
        left outer join ticket on movietime.movietime_no = ticket.movietime_no
        inner join member on member.member_no = ticket.member_no
where
    movie.movie_no = #{movie_no}  and member_sex = #{member_sex}
</select>


	
	
	<insert id="insert" parameterType="movies">
		insert into movie values(movie_no_seq.nextval,#{files_no},#{movie_title},#{movie_director},#{movie_ticket_rate},sysdate,#{movie_runtime},#{movie_country},#{movie_grade},#{movie_status},#{movie_genre},#{movie_publisher},#{movie_content})
	</insert>
	
	<select id="getList" resultType="movies">
		select * from movie order by movie_no desc
	</select>
	
	<delete id="delete" parameterType="int">
		delete movie where movie_no = #{movie_no}
	</delete>
	
	<update id="update" parameterType="movies">
		update movie set movie_title = #{movie_title},
	            movie_director =#{movie_director},
	            movie_startdate = sysdate,
				movie_runtime = #{movie_runtime},
				movie_country = #{movie_country},
				movie_grade = #{movie_grade},
				movie_status = #{movie_status},
				movie_publisher = #{movie_publisher},
				movie_genre = #{movie_genre}
		where movie_no = #{movie_no}
	</update>

<!-- 배우 이름 출력 리스트 -->
	<select id="actorList" resultType="String" parameterType="int">
		select actor_name from actor where movie_no= #{movie_no}
	
	</select>
<!-- 영화 상세 정보 -->
<select id="movieDetail" resultType="movies" parameterType="int">
	select*from movie where movie_no = #{movie_no}
</select>

<!-- 상세 정보 트레일러 -->
	<select id="info_trailer" resultType="videoVO" >
	select * from movie m
    inner join
    video v on m.movie_no = v.movie_no
    where m.movie_no = #{movie_no}
	</select>
<!-- 상세 정보 스틸컷 -->
	<select id="stillcut" resultType="stillcutVO" parameterType="int">
	select*from stillcut
		inner join
		(select*from movie 
    	inner join 
    		files on movie.files_no = files.files_no)a
    			on stillcut.movie_no = a.movie_no
    	where a.movie_no = #{movie_no}
	
	</select>

	<select id="ageCount" resultType="ageVO" parameterType="int">
	
			select age * 10 age, count(*) cnt from (
   		 select trunc(trunc(extract(year from sysdate)- trunc (to_number(member_birth / 10000))+1/10 )/10) age, member.* from member 
		)A 
			inner join ticket T on T.member_no = A.member_no
			inner join movietime MT on MT.movietime_no = T.movietime_no
			inner join (select * from movie where movie_no=#{movie_no}) MV on MV.movie_no = MT.movie_no
	group by age
	order by age
	</select>

<select id="movieSearch" resultType="movieVO">
	SELECT MV.*, NVL(MV_SUB.REVIEW_CONTENT,' ') AS REVIEW_CONTENT
	FROM 	
	    MOVIE MV LEFT JOIN 
		(
		 SELECT  RV.REVIEW_CONTENT , MT.MOVIE_NO
		 FROM 	TICKET TK INNER JOIN REVIEW RV
		 ON TK.TICKET_NO = RV.TICKET_NO 
		 INNER JOIN MOVIETIME MT 
		 ON MT.MOVIETIME_NO = TK.MOVIETIME_NO
		 )MV_SUB
	ON MV.MOVIE_NO = MV_SUB.MOVIE_NO
	WHERE REPLACE(MV.MOVIE_TITLE,' ') LIKE '%'||#{keyword}||'%' OR REPLACE(MV.MOVIE_DIRECTOR,' ') LIKE '%'||#{keyword}||'%'
	  	  OR REPLACE(MV.MOVIE_CONTENT,' ') LIKE '%'||#{keyword}||'%' OR REPLACE(MV_SUB.REVIEW_CONTENT,' ') LIKE '%'||#{keyword}||'%'
	  
</select>

<insert id="wishinsert" parameterType="map"> <!-- 지현이 추가 -->
     INSERT INTO WISH(WISH_NO,MEMBER_NO,MOVIE_NO) values (movie_no_seq.nextval,#{member_no},#{movie_no})
</insert>

<update id="mvwishupdate">
     UPDATE movie SET movie_wish = movie_wish + 1 WHERE movie_no= #{movie_no}
</update>

<update id="updatewishreset">
     UPDATE movie SET movie_wish = movie_wish - 1 WHERE movie_no= #{movie_no}
</update>

<update id="wishReset" parameterType="int">
	update movie set movie_wish = (select count(*) from wish where movie_no=#{movie_no}) where movie_no=#{movie_no}
</update>

<select id="wishCount" parameterType="int" resultType="int">
select movie_wish from movie where movie_no=#{movie_no}
</select>

<select id="whishmember" parameterType="int" resultType="movieVO"> <!-- 지현이 추가  -->
select 
B.movie_title, B.movie_no 
from wish A inner join  movie B
on A.movie_no = B.movie_no
where A.member_no = #{member_no}
</select>

<select id="check" parameterType="map" resultType="int">
	select count(*) from wish where member_no = #{member_no} and movie_no = #{movie_no}
</select>

<delete id="deletewish" parameterType="map">
	delete wish where member_no = #{member_no} and movie_no= #{movie_no}
</delete>

<select id="review" parameterType="int" resultType="reviewvo">
	select r.*,me.member_id from review r 
		inner join ticket t on r.ticket_no = t.ticket_no 
		inner join movietime mt on t.movietime_no = mt.movietime_no 
		inner join movie m on mt.movie_no = m.movie_no
        inner join member me on t.member_no = me.member_no
	where m.movie_no = #{movie_no}
</select>

<select id="egg" parameterType="int" resultType="reviewDto">
	select NVL(round(sum(r.review_egg)/count(*)*100,0),0) review_egg,
		NVL(round(sum(r.review_1)/count(*)*100,0),0) review_1,
		NVL(round(sum(r.review_2)/count(*)*100,0),0) review_2,
		NVL(round(sum(r.review_3)/count(*)*100,0),0) review_3,
		NVL(round(sum(r.review_4)/count(*)*100,0),0) review_4,
		NVL(round(sum(r.review_5)/count(*)*100,0),0) review_5
	from review r inner join ticket t on r.ticket_no = t.ticket_no inner join movietime mt on t.movietime_no = mt.movietime_no
		inner join movie m on mt.movie_no = m.movie_no where m.movie_no = #{movie_no}
</select>
</mapper>



		
		



